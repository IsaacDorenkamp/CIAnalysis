import math
import os
import wx

import wx.lib.agw.floatspin as floatspin
import wx.lib.scrolledpanel as wxscrolled
import wx.lib.statbmp as genstatbmp

# About Info
AUTHOR = "Isaac Dorenkamp"
VERSION = "1.0 Release"

DESCRIPTION = ("""\
CI Analysis Tool is an application designed to accept the output of CellCollective's dose-response analysis feature for\
 various environments. These outputs are then used to calculate confidence intervals for the expected change in the \
activity levels of nodes between control groups and their associated treatment groups. Furthermore, the tool compares \
lab data detailing the activity levels of specified nodes in various donor cells prepared according to the environments\
 associated with the control and treatment groups in each experiment, and provides the percentage accuracy of the data \
generated by the model analysis with respect to the given lab data. For more information on the proper formats for the \
input data, please see the "How To" window, accessed in the "About" menu.\
""")


class Choice2(wx.Choice):
    def __init__(self, parent):
        wx.Choice.__init__(self, parent)

        self.SetCursor(wx.Cursor(wx.CURSOR_HAND))

        self.Bind(wx.EVT_PAINT, self.__do_paint)

    def __do_paint(self, _):
        dc = wx.BufferedPaintDC(self)
        dc = wx.GCDC(dc)
        dc.Clear()

        dc.SetBrush(wx.Brush(self.GetBackgroundColour()))
        dc.SetPen(wx.TRANSPARENT_PEN)
        dc.DrawRectangle((0, 0), self.GetSize())

        dc.SetBrush(wx.Brush('white'))
        dc.SetPen(wx.Pen('black', 2))
        sz = self.GetSize()
        dc.DrawRoundedRectangle((1, 1), (sz[0] - 1, sz[1] - 1), 3)

        text = self.GetStringSelection()
        te = dc.GetTextExtent(text)
        dc.DrawText(text, (sz[0] / 2) - (te[0] / 2), (sz[1] / 2) - (te[1] / 2))

        dc.SetBrush(wx.Brush('black'))
        dc.DrawPolygon([(0, 0), (14, 0), (7, 8)], sz[0] - 20, (sz[1] / 2) - 3)


class ContentObject:
    def __init__(self):
        self.rendered = False

    def render(self, _):
        if self.rendered:
            raise RuntimeError("Cannot render a ContentObject twice!")
        self.rendered = True


class ImageContentObject(ContentObject):
    def __init__(self, src, comment=''):
        ContentObject.__init__(self)

        self.ImageContent = wx.Bitmap()
        self.ImageContent.LoadFile(src)
        self.ImageSource = src
        self.ImageComment = comment

    def render(self, parent):
        ContentObject.render(self, parent)

        c = wx.Panel(parent)
        img = genstatbmp.GenStaticBitmap(c, wx.ID_ANY, self.ImageContent)
        txt = wx.StaticText(c, wx.ID_ANY, self.ImageComment)
        txt.SetForegroundColour('#707070')

        def _sfic(_): parent.SetFocusIgnoringChildren()
        img.Bind(wx.EVT_LEFT_DOWN, _sfic)
        txt.Bind(wx.EVT_LEFT_DOWN, _sfic)

        _s = wx.BoxSizer(wx.VERTICAL)
        _s.Add(img, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)
        _s.Add(txt, 0, wx.ALIGN_CENTER | wx.LEFT | wx.RIGHT | wx.BOTTOM, 10)
        c.SetSizer(_s)

        parent.GetSizer().Add(c, 0, wx.EXPAND)

    def __str__(self):
        return '<ImageContentObject Instance>\nImage Source: %s\nComment: %s' % (self.ImageSource, self.ImageComment)


class TextContentObject(ContentObject):
    def __init__(self, txt):
        ContentObject.__init__(self)

        self.Text = txt

    def render(self, parent):
        ContentObject.render(self, parent)

        c = wx.StaticText(parent, wx.ID_ANY, self.Text)
        c.Bind(wx.EVT_LEFT_DOWN, lambda _: parent.SetFocusIgnoringChildren())

        parent.GetSizer().Add(c, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)

    def __str__(self):
        return '<TextContentObject Instance>\nText Contained: %s' % self.Text


class HowToDialog(wx.Dialog):
    TITLE_FONT = None

    def __init__(self, parent=None):
        wx.Dialog.__init__(self, parent, title="How To Use CI Analysis Tool")

        self.__pages = {}
        self.__page_order = []

        self.__cache = {}

        if HowToDialog.TITLE_FONT is None:
            HowToDialog.TITLE_FONT = self.GetFont()
            HowToDialog.TITLE_FONT.SetPointSize(18)

        self.__config_ui()

    @staticmethod
    def ConstructPage(source_code, parent):
        lines = source_code.split('\n')
        title = lines[0]
        panel = wx.Panel(parent)
        tlbl = wx.StaticText(panel, wx.ID_ANY, title)
        if HowToDialog.TITLE_FONT is not None:
            tlbl.SetFont(HowToDialog.TITLE_FONT)

        psizer = wx.BoxSizer(wx.VERTICAL)
        psizer.Add(tlbl, 0, wx.EXPAND | wx.ALL, 5)
        panel.SetSizer(psizer)
        if len(lines) == 1:
            pass
        else:
            lines = lines[1:]
            content = []
            for line in lines:
                search_image = '[IMAGE' in line
                if search_image:
                    image_idx = line.index('[IMAGE')
                else:
                    image_idx = -1
                line_content = []

                in_image = False
                image_content = ""
                cur_text = ""
                ignore_special_master = False
                for char_idx in xrange(0, len(line)):
                    if char_idx == image_idx:
                        if cur_text != '':
                            t = TextContentObject(cur_text)
                            line_content.append(t)
                            cur_text = ''
                        in_image = True
                        image_content += line[char_idx]
                        continue
                    if in_image:
                        if line[char_idx] == '\\' and not ignore_special_master:
                            ignore_special_master = True
                        ism = ignore_special_master
                        ignore_special_master = False
                        image_content += line[char_idx]
                        if line[char_idx] == ']' and not ism:
                            # Time to process the image info
                            data = image_content.split('[IMAGE')[1].split(']')[0]
                            ignore_special = False
                            _data = ''
                            for d in data:
                                if d == '\\' and not ignore_special:
                                    ignore_special = True
                                    continue
                                else:
                                    _data += d
                                    ignore_special = False  # reset ignore special character flag

                            if data[0] != ' ' and data[0] != '\t':
                                # Why raise an error when the program can function fine without this whitespace? To
                                # enforce readability and convention upon those who write the How-To source documents.
                                raise ValueError("There must be whitespace between '[IMAGE' and the image data!")
                            data = data.strip()
                            if data == '':
                                raise ValueError("Invalid How-To Syntax - IMAGE block cannot be empty!")

                            data_vals = []
                            data_val = ''
                            ignore_special = False
                            for d in data:
                                if d == '\\' and not ignore_special:
                                    ignore_special = True
                                    continue
                                elif d == ';' and not ignore_special:
                                    data_vals.append(data_val)
                                    data_val = ''
                                else:
                                    data_val += d
                                    ignore_special = False  # reset ignore special characters flag
                            if data_val != '':
                                data_vals.append(data_val)

                            img_src = data_vals[0]
                            img_comment = ''
                            if len(data_vals) == 2:
                                img_comment = data_vals[1]
                            elif len(data_vals) > 2:
                                raise ValueError("Too many arguments for [IMAGE ...] block! Only a file name and a \
comment on the image are allowed.")

                            img_obj = ImageContentObject(img_src, img_comment)
                            line_content.append(img_obj)

                            image_content = ""
                            in_image = False
                            search_image = '[IMAGE' in line[char_idx:]
                            if search_image:
                                image_idx = line[char_idx:].index('[IMAGE') + char_idx
                            else:
                                image_idx = -1
                        continue
                    else:
                        cur_text += line[char_idx]

                if cur_text != '':
                    line_content.append(TextContentObject(cur_text))
                content.extend(line_content)
            for i in content:
                if not isinstance(i, ContentObject):
                    raise ValueError("Internal Error - All items of 'content' must be ContentObjects!")
                i.render(panel)
        s = parent.GetSizer()
        if s is None:
            s = wx.BoxSizer(wx.VERTICAL)
            parent.SetSizer(s)
        s.Add(panel, 1, wx.EXPAND)
        panel.SetBackgroundColour('white')
        return panel

    def AddPage(self, name, source):
        if name in self.__pages:
            raise ValueError("Page '%s' already exists!" % name)
        self.__pages[name] = source
        self.__page_order.append(name)
        self.Pages.Append(name)

        if len(self.__pages) == 1:
            wx.CallAfter(self.LoadPage, name)
            wx.CallAfter(self.Pages.SetStringSelection, name)

    def RemovePage(self, name):
        if name not in self.__pages:
            raise ValueError("Cannot remove non-existent page '%s'!" % name)
        del self.__pages[name]
        self.__page_order.remove(name)

    def LoadPage(self, name):
        src = self.__pages.get(name)
        if src is None:
            raise ValueError("Page source '%s' does not exist or is None!")
        if src in self.__cache:
            res = self.__cache[src]
            for i in self.ContentPane.GetChildren():
                i.Hide()
            res.Show()
        else:
            try:
                src_code_f = open(src, 'r')
                src_code = src_code_f.read()
                src_code_f.close()
            except IOError:
                wx.MessageBox("Could not open source file '%s'." % src, "I/O Error", wx.ICON_ERROR | wx.OK)
                return

            for i in self.ContentPane.GetChildren():
                i.Hide()

            panel = HowToDialog.ConstructPage(src_code, self.ContentPane)
            self.__cache[src] = panel

            panel.Show()

        self.Fit()
        self.ContentPane.Layout()
        sz = self.ContentPane.GetVirtualSize()
        self.ContentPane.SetVirtualSize((math.ceil(float(sz[0]) / 20) * 20, math.ceil(float(sz[1]) / 20) * 20))
        self.ContentPane.Layout()
        self.ContentPane.SetupScrolling(scroll_x=False)
        self.Fit()
        self.Centre()

    def __prev(self, _):
        sel = self.Pages.GetSelection()
        if sel <= 0:
            return
        self.Pages.SetSelection(sel - 1)
        self.LoadPage(self.Pages.GetStringSelection())

    def __next(self, _):
        sel = self.Pages.GetSelection()
        if sel >= self.Pages.GetCount():
            return
        self.Pages.SetSelection(sel + 1)
        self.LoadPage(self.Pages.GetStringSelection())

    def __config_ui(self):
        self.ContentPane = wxscrolled.ScrolledPanel(self)

        b_bar = wx.Panel(self)
        self.Previous = wx.BitmapButton(b_bar, wx.ID_BACKWARD, wx.ArtProvider.GetBitmap(wx.ART_GO_BACK))
        self.Pages = Choice2(b_bar)
        self.Next = wx.BitmapButton(b_bar, wx.ID_FORWARD, wx.ArtProvider.GetBitmap(wx.ART_GO_FORWARD))
        self.Previous.Bind(wx.EVT_BUTTON, self.__prev)
        self.Pages.Bind(wx.EVT_CHOICE, lambda evt: self.LoadPage(self.Pages.GetStringSelection()))
        self.Next.Bind(wx.EVT_BUTTON, self.__next)

        _s = wx.BoxSizer(wx.HORIZONTAL)
        _s.Add(self.Previous, 0, wx.EXPAND | wx.ALL, 10)
        _s.Add(self.Pages, 1, wx.EXPAND | wx.TOP | wx.BOTTOM, 10)
        _s.Add(self.Next, 0, wx.EXPAND | wx.ALL, 10)
        b_bar.SetSizer(_s)

        self.AddPage("Not Implemented", "howto/not_imp.dpg")

        gbs = wx.BoxSizer(wx.VERTICAL)
        gbs.Add(self.ContentPane, 1, wx.EXPAND)
        gbs.Add(b_bar, 0, wx.EXPAND)
        self.SetSizer(gbs)

        self.SetMinSize((600, 400))
        self.SetMaxSize((1500, 600))
        self.Layout()
        self.Fit()
        self.Centre()


# Utility Functions/Classes
def MakeReadOnly(file_picker):
    text_ctrl = file_picker.GetTextCtrl()
    text_ctrl.SetEditable(False)
    text_ctrl.HideNativeCaret()

    text_ctrl.SetCursor(wx.Cursor(wx.CURSOR_ARROW))


class InvalidCSVError(ValueError):
    def __init__(self, msg):
        ValueError.__init__(self, msg)


# Model Library
class Experiment:
    NAME_IDX = 0
    PATH_IDX = 1

    def __init__(self):
        self.control = None
        self.treatment = []

        self.__data = None
        self.__missing = []
        self.__dirty = False

    @staticmethod
    def LoadCSV(filename):
        try:
            f = open(filename, 'r')
            csv = f.read()
            f.close()
            data = csv.split('\n')
            header = data[0]
            data = data[1:]
            data_map = {}
            entry_names = []
            for i in header.split(','):
                entry_names.append(i)
            for line in data:
                if line == '':
                    continue
                entries = line.split(',')
                if len(entries) != len(entry_names):
                    raise InvalidCSVError("Amount of entries in every line should be %d, \
instead found a line with %d entries." % (len(entry_names), len(entries)))
                for entry_no in xrange(0, len(entries)):
                    entry = float(entries[entry_no])
                    if entry_names[entry_no] in data_map:
                        data_map[entry_names[entry_no]].append(entry)
                    else:
                        data_map[entry_names[entry_no]] = [entry]
            return data_map
        except IOError:
            return None

    def LoadGroupData(self):
        if self.__data is not None and not self.__dirty:
            return self.__data, self.__missing

        missing = []
        if self.control is not None:
            control_group = Experiment.LoadCSV(self.control)
        else:
            control_group = None

        if control_group is None and self.control is not None:
            missing.append(self.control)
        treatment_groups = {}
        for i in self.treatment:
            name = i[0]
            path = i[1]
            if path is None:
                continue
            group = Experiment.LoadCSV(path)
            if group is None:
                missing.append(path)  # return information about the missing data file
            treatment_groups[name] = group
        self.__data = control_group, treatment_groups
        self.__missing = missing
        self.__dirty = len(self.__missing) > 0
        return self.__data, self.__missing

    def SetControl(self, ctrl_src):
        if ctrl_src != self.control:
            self.__dirty = True
        self.control = ctrl_src

    def GetControl(self):
        return self.control

    def AddTreatment(self, name, treatment):
        self.__dirty = True
        self.treatment.append([name, treatment])

    def SetTreatment(self, idx, treatment):
        self.__dirty = True
        self.treatment[idx][1] = treatment

    def GetTreatments(self):
        return self.treatment

    def GetTreatment(self, idx):
        return self.treatment[idx]

    def HasTreatment(self, val, idx):
        for i in self.treatment:
            if i[idx] == val:
                return True
        return False


# Lab Data Loading Frame
class LabDataOrganizer(wx.Frame):
    def __init__(self, experiments, parent=None):
        wx.Frame.__init__(self, parent, title="Lab Data Organizer", style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER)

        self.__close = lambda: None

        self.data = {}

        self.__config_ui(experiments)

    def SetLabDataExperiments(self, data):
        for i in self.data.keys():
            exp = self.data[i]
            data_exp = data.get(i)
            if data_exp is None:
                continue
            for j in exp.keys():
                pth = data_exp.get(j)
                if pth is None:
                    continue
                exp[j][0].SetPath(pth)
                exp[j][1].SetLabel(pth)
                exp[j][2] = pth

        self.SetMaxSize(wx.DefaultSize)
        self.SetMinSize(wx.DefaultSize)
        self.Layout()
        self.Fit()
        self.SetMinSize(self.GetSize())
        self.SetMaxSize(self.GetSize())

    def GetLabDataExperiments(self):
        ret = {}
        for i in self.data.keys():
            exp = self.data[i]
            ret[i] = {}
            for j in exp.keys():
                ret[i][j] = self.data[i][j][2]
        return ret

    def __do_close(self, evt):
        self.__close()
        evt.Skip()

    def OnClose(self, func):
        self.__close = func

    def __config_ui(self, experiments):
        panel = wx.Panel(self)

        fgs = wx.BoxSizer(wx.VERTICAL)

        def chg_path(exp_key, treat):
            d_src, src_l, path = self.data[exp_key][treat]
            self.data[exp_key][treat][2] = d_src.GetPath()
            src_l.SetLabel(d_src.GetPath())
            self.SetMaxSize(wx.DefaultSize)
            self.SetMinSize(wx.DefaultSize)
            self.Layout()
            self.Fit()
            self.SetMinSize(self.GetSize())
            self.SetMaxSize(self.GetSize())

        def __chg_path_fact(expname, treat):
            return lambda evt: chg_path(expname, treat)

        for i in experiments.keys():
            exp = experiments[i]
            _this_panel = wx.Panel(panel)
            this_panel = wx.Panel(_this_panel)
            gsizer = wx.FlexGridSizer(3)
            gsizer.AddGrowableCol(1)
            self.data[i] = {}

            treats = exp.GetTreatments()
            for j in treats:
                this_exp_lbl = wx.StaticText(this_panel, label=j[0])
                src_lbl = wx.StaticText(this_panel, label="(No Data)")
                data_src = wx.FilePickerCtrl(this_panel, style=wx.FLP_SMALL)

                if j[0] == treats[0][0]:
                    border = wx.ALL
                elif j[0] == treats[len(treats) - 1][0]:
                    border = wx.ALL
                else:
                    border = wx.LEFT | wx.RIGHT

                gsizer.Add(this_exp_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | border, 10)
                gsizer.Add(src_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_CENTER | border, 10)
                gsizer.Add(data_src, 0, border | wx.EXPAND, 10)

                self.data[i][j[0]] = [data_src, src_lbl, '']

                data_src.Bind(wx.EVT_FILEPICKER_CHANGED, __chg_path_fact(i, j[0]))

            _s = wx.StaticBoxSizer(wx.VERTICAL, _this_panel, i)
            _s.Add(this_panel, 1, wx.EXPAND | wx.TOP, 5)
            _this_panel.SetSizer(_s)
            this_panel.SetSizer(gsizer)
            fgs.Add(_this_panel, 1, wx.ALL | wx.EXPAND, 7)

        ok_btn = wx.Button(panel, label="OK")
        ok_btn.Bind(wx.EVT_BUTTON, lambda evt: self.Close())
        fgs.Add(ok_btn, 0, wx.ALIGN_RIGHT | wx.ALL, 7)

        panel.SetSizer(fgs)

        _s = wx.BoxSizer(wx.VERTICAL)
        _s.Add(panel, 1, wx.EXPAND)
        self.SetSizer(_s)

        self.Fit()
        self.Layout()
        self.SetMaxSize(self.GetSize())

        # Bind Close Event
        self.Bind(wx.EVT_CLOSE, self.__do_close)


# Main Frame
class CIAnalysisTool(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title="Confidence Interval Analysis Tool")

        self.experiments = {}
        self.cur_experiment = None
        self.__exp_data = (None, {})

        self.Organizer = None
        self.LabData = {}

        self.__config_ui()

    @staticmethod
    def _quantile(data_set, q):
        # Calculate the "q" percentile of data_set.
        # Linear interpolation is used when the quantile
        # lies between two elements of data_set.

        if q > 1.0 or q < 0.0:
            raise ValueError("Quantile must be between 0.0 and 1.0!")
        if len(data_set) == 0:
            return 0
        data_set = list(data_set)
        data_set.sort()
        idx = ((len(data_set) - 1) * q)

        if math.floor(idx) != idx:
            f_idx = int(math.floor(idx))
            return data_set[f_idx] + (data_set[f_idx + 1] - data_set[f_idx]) * (idx - f_idx)
        else:
            return data_set[int(idx)]

    @staticmethod
    def RunCI(A, B, _nodes, low_quantile, high_quantile):
        nodes = []
        for i in _nodes:
            if not (i in A and i in B):
                continue
            nodes.append(i)

        A_avg = {}
        B_avg = {}
        for i in nodes:
            A_avg[i] = sum(A[i]) / len(A[i])
            B_avg[i] = sum(B[i]) / len(B[i])

        A_quantile = {}
        B_quantile = {}
        for i in nodes:
            A_quantile[i] = (CIAnalysisTool._quantile(A[i], low_quantile), CIAnalysisTool._quantile(A[i],
                                                                                                    high_quantile))
            B_quantile[i] = (CIAnalysisTool._quantile(B[i], low_quantile), CIAnalysisTool._quantile(B[i],
                                                                                                    high_quantile))

        results = {}
        for i in nodes:
            A_top = A_quantile[i][0]
            A_bottom = A_quantile[i][1]
            B_top = B_quantile[i][0]
            B_bottom = B_quantile[i][1]

            if B_bottom == 0 and A_top == 0:
                if A_avg[i] > 0:
                    _min = -100
                else:
                    _min = 0
            else:
                if A_top == 0:
                    _min = (B_bottom * 10) * 100
                else:
                    # regular formula. This is the standard method of
                    # calculating the minimum.
                    _min = ((B_bottom - A_top) / A_top) * 100

            if B_top == 0 and A_bottom == 0:
                if B_avg[i] > 0:
                    _max = (B_avg[i] * 10) * 100
                else:
                    _max = 0
            else:
                if A_bottom == 0:
                    _max = (B_top * 10) * 100
                else:
                    # regulator formula. This is the standard method of
                    # calculating the maximum.
                    _max = ((B_top - A_bottom) / A_bottom) * 100

            temp = _max
            _max = max(_min, _max)
            _min = min(_min, temp)

            results[i] = (_min, _max)

        return results

    def __new_experiment(self, _):
        if self.Organizer is not None:
            wx.MessageBox("Cannot create new experiment while Lab Data Organizer is open.")
            return
        name_dialog = wx.TextEntryDialog(self, 'Enter experiment name:', 'New Experiment')
        if name_dialog.ShowModal() == wx.ID_OK:
            name = name_dialog.GetValue()
            if name in self.experiments:
                wx.MessageBox("Experiment '%s' already exists." % name, "Error", wx.ICON_ERROR | wx.OK)
                return
            if not name.replace(' ', '').replace('_', '').isalnum():
                wx.MessageBox("Experiment names must only contain alphanumeric characters, spaces, and underscores.")
                return
            self.experiments[name] = Experiment()
            self.ExperimentList.Append(name)

    def __rename_experiment(self, _):
        if self.Organizer is not None:
            wx.MessageBox("Cannot rename experiment while Lab Data Organizer is open.")
            return
        sel = self.ExperimentList.GetSelection()
        if sel == -1:
            return
        curname = self.ExperimentList.GetString(sel)
        namedlg = wx.TextEntryDialog(self, 'Enter new experiment name:', 'Rename Experiment')
        namedlg.SetValue(curname)
        if namedlg.ShowModal() == wx.ID_OK:
            newname = namedlg.GetValue()
            if newname == curname:
                return
            else:
                if newname in self.experiments:
                    wx.MessageBox("Experiment '%s' already exists." % newname, "Error", wx.ICON_ERROR | wx.OK)
                else:
                    if not newname.replace(' ', '').replace('_', '').isalnum():
                        wx.MessageBox("Experiment names must only contain alphanumeric characters, spaces, and \
underscores.")
                        return
                    self.experiments[newname] = self.experiments.pop(curname)
                    if self.cur_experiment == curname:
                        self.cur_experiment = newname
                    self.ExperimentList.SetString(sel, newname)

    def __remove_experiment(self, _):
        if self.Organizer is not None:
            wx.MessageBox("Cannot remove experiment while Lab Data Organizer is open.")
            return
        sel = self.ExperimentList.GetSelection()
        if sel == -1:
            return
        string = self.ExperimentList.GetString(sel)
        del self.experiments[string]
        self.ExperimentList.Delete(sel)
        if self.cur_experiment == string:
            self.cur_experiment = None
            self.__exp_data = (None, {})
            self.Treatments.Clear()
            self.ControlFile.SetPath('')
            self.TreatmentFile.SetPath('')

    def __reload_exp_data(self, reload_nodes=True, do_msg_box=False):
        # Find nodes which are included in all groups, just in case some groups
        # contain info about nodes which other groups do not
        experiment = self.experiments[self.cur_experiment]
        _data = experiment.LoadGroupData()
        self.__exp_data = _data[0]

        if len(_data[1]) > 0 and do_msg_box:
            files = ', '.join(_data[1])
            wx.MessageBox("The following experiment group files were not found in the file system: %s." % files,
                          "I/O Error", wx.ICON_WARNING | wx.OK)

        if reload_nodes:
            nodes = []
            v = self.__exp_data[1].values() if self.__exp_data[1] is not None else None
            _items = self.NodeList.GetItems()

            exp_data = []
            for exp in self.experiments.values():
                if exp == experiment:
                    continue
                else:
                    d = exp.LoadGroupData()[0]
                    # Skip un-loaded experiments
                    if d[0] is None and (all([(e is None) for e in d[1].values()]) or d[1] == {} or d[1] is None):
                        continue
                    data = [d[0]] if d[0] is not None else []
                    data.extend(d[1].values())
                    exp_data.append(data)

            if self.__exp_data[0] is None or all([(entry is None) for entry in self.__exp_data[0]]):
                if len(exp_data) == 0:
                    if self.__exp_data[1] == {} or self.__exp_data[1] is None:
                        return
                    else:
                        base_data = None
                        for i in self.__exp_data[1].keys():
                            if (self.__exp_data[1][i] is None or
                                    all([(entry is None) for entry in self.__exp_data[1][i]])):
                                continue
                            else:
                                base_data = self.__exp_data[1][i]
                                break
                        if base_data is None:
                            return
                else:
                    base_data = exp_data[0]
            else:
                base_data = self.__exp_data[0]

            for i in base_data:
                if i is None:
                    continue
                in_all = True
                if v is not None:
                    for j in v:
                        if j is not None and i not in j:
                            in_all = False
                            break
                for data in exp_data:
                    if data is base_data:
                        # don't compare an experiment to itself
                        continue
                    for datum in data:
                        if datum is None:
                            continue  # skip unloaded data sets
                        if i not in datum:
                            in_all = False
                            break
                    if not in_all:
                        break
                if in_all:
                    if i not in _items:
                        self.NodeList.Append(i)
                    nodes.append(i)

            for i in self.NodeList.GetItems():
                if i not in nodes:
                    loc = self.NodeList.FindString(i)
                    if loc != -1:
                        self.NodeList.Delete(loc)
            self.NodeBox.SetMinSize(self.NodeBox.GetSize())
            self.NodeBox.Fit()
            self.NodeBox.SetMinSize(wx.DefaultSize)
            self.SetMinSize(self.GetSize())
            self.Fit()
            self.SetMinSize(self.InitialSize)

    # Called when the selected experiment changes
    def __load_experiment(self, evt, do_msg_box=False):
        sel = self.ExperimentList.GetSelection()
        if sel == -1:
            if evt is None and len(self.ExperimentList.GetItems()) > 0:
                self.ExperimentList.SetSelection(0)
                self.cur_experiment = self.ExperimentList.GetStringSelection()
                self.__reload_exp_data(True, do_msg_box)
            return
        expname = self.ExperimentList.GetString(sel)
        self.cur_experiment = expname

        experiment = self.experiments[expname]
        ctrl = experiment.GetControl()
        if ctrl is not None:
            self.ControlFile.SetPath(ctrl)
        else:
            self.ControlFile.SetPath('')
        self.Treatments.Clear()
        all_treatments = experiment.GetTreatments()
        for i in all_treatments:
            self.Treatments.Append(i[0])
        if len(all_treatments) > 0:
            self.Treatments.SetSelection(0)
            self.TreatmentFile.SetPath(all_treatments[0][1])
        else:
            self.TreatmentFile.SetPath('')

        self.__reload_exp_data(False, do_msg_box)

    def __set_control(self, _):
        if self.cur_experiment is None:
            self.ControlFile.SetPath('')
            return
        self.experiments[self.cur_experiment].SetControl(self.ControlFile.GetPath())

        self.__reload_exp_data()  # reload group data when control group file path changes

    def __set_treatment(self, _):
        if self.cur_experiment is None or self.Treatments.GetSelection() == -1:
            self.TreatmentFile.SetPath('')
            return
        sel = self.Treatments.GetSelection()
        if sel == -1:
            return
        self.experiments[self.cur_experiment].SetTreatment(sel, self.TreatmentFile.GetPath())

        self.__reload_exp_data()  # reload group data when treatment group file path changes

    def __add_treatment(self, _):
        if self.cur_experiment is None:
            return
        namedlg = wx.TextEntryDialog(self, 'Enter treatment group name:', 'New Treatment Group')
        if namedlg.ShowModal() == wx.ID_OK:
            name = namedlg.GetValue()
            if self.experiments[self.cur_experiment].HasTreatment(name, Experiment.NAME_IDX):
                wx.MessageBox("Treatment group '%s' already exists in this experiment." % name, "Error",
                              wx.ICON_ERROR | wx.OK)
            else:
                if not name.replace(' ', '').replace('_', '').isalnum():
                    wx.MessageBox("Treatment names must only contain alphanumeric characters, spaces, and underscores.")
                    return
                self.experiments[self.cur_experiment].AddTreatment(name, None)
                self.Treatments.Append(name)
                self.Treatments.SetStringSelection(name)
                self.__treatment_changed()

    def __treatment_changed(self, _=None):
        if self.cur_experiment is None:
            return
        treatment_path = self.experiments[self.cur_experiment].GetTreatment(self.Treatments.GetSelection())[1]
        treatment_path = '' if treatment_path is None else treatment_path
        self.TreatmentFile.SetPath(treatment_path)

    def RunAnalysis(self, _):
        prog_d = wx.ProgressDialog("Analysis", "Calculating confidence intervals...", 100, None)
        prog_d.ShowModal()

        low_q = self.LowQuantile.GetValue()
        high_q = self.HighQuantile.GetValue()
        if low_q > high_q:
            dlg = wx.MessageDialog(self, "Low quantile cannot be greater than high quantile! Proceed instead using \
low quantile %.2f and high quantile %.2f?" % (high_q, low_q), "Invalid Quantiles", wx.ICON_QUESTION | wx.YES_NO)
            res = dlg.ShowModal()
            if res == wx.ID_YES:
                temp = low_q
                low_q = high_q
                high_q = temp
                self.LowQuantile.SetValue(low_q)
                self.HighQuantile.SetValue(high_q)
            else:
                wx.MessageBox(self, "Analysis canceled.", "Analysis Canceled", wx.ICON_INFORMATION | wx.OK)
                return

        nodes = self.NodeList.GetCheckedStrings()
        out_loc = self.OutputDirectory.GetPath()
        if out_loc == '':
            wx.MessageBox('Please specify output directory.', 'Output Location Not Specified', wx.ICON_ERROR | wx.OK)
            return
        # this case should never occur with DirPickerCtrl, but just checking.
        if os.path.isfile(out_loc):
            wx.MessageBox('Output location must be a directory, not a file!', 'Output Error', wx.ICON_ERROR | wx.OK)
            return
        if not os.path.exists(out_loc):
            try:
                os.mkdir(out_loc)
            except OSError:
                wx.MessageBox('Could not create output location.', 'Output Error', wx.ICON_ERROR | wx.OK)
                return

        tick_n = 0
        res_set = {}
        for i in self.experiments.keys():
            tick_n += 1
            prog_d.Update((float(tick_n) / len(self.experiments)) * 100, "Analyzing experiment %s..." % i)
            pth = os.path.join(out_loc, i)
            if (not os.path.exists(pth)) or (os.path.exists(pth) and os.path.isfile(pth)):
                os.mkdir(pth)
            experiment = self.experiments[i]
            datasets = experiment.LoadGroupData()[0]

            ctrl = datasets[0]
            res_set[i] = {}
            for treat in experiment.GetTreatments():
                name = treat[0]
                dataset = datasets[1].get(name)
                if dataset is None:
                    continue  # skip non-configured treatments

                results = CIAnalysisTool.RunCI(ctrl, dataset, nodes, low_q, high_q)
                res_set[i][name] = results
                entries = []
                for result in results.keys():
                    res = results[result]
                    entries.append("Node: %s\nCI Minimum: %.02f\nCI Maximum: %.02f" % (result, res[0], res[1]))
                output = '\n\n'.join(entries)
                out_path = os.path.join(pth, name + '.txt')
                try:
                    out_f = open(out_path, 'w')
                    out_f.write(output)
                    out_f.close()
                except IOError:
                    wx.MessageBox("Could not open file '%s'. Output not written." % out_path, "I/O Error",
                                  wx.ICON_ERROR | wx.OK)

        try:
            out_f = open(os.path.join(out_loc, "config.txt"), 'w')
            out_f.write("CI Properties:\nLow Quantile: %.2f%%\nHigh Quantile %.2f%%" % (low_q * 100, high_q * 100))
            out_f.close()
        except IOError:
            wx.MessageBox("Could not save configuration properties. OK otherwise.", "Warning", wx.ICON_WARNING | wx.OK)

        prog_d.Update(99, "Calculated confidence intervals, comparing to lab data...")

        missing = None
        for i in self.LabData.keys():
            if i not in self.experiments:
                missing = i
                break
        if missing is not None:
            prog_d.Update(100)
            wx.MessageBox("Missing Lab Data for at least one experiment: %s." % missing, "Missing Lab Data",
                          wx.ICON_ERROR | wx.OK)
            return

        try:
            LabDataSet = self.LoadLabData()
        except IOError as ioe:
            wx.MessageBox(ioe.message, "I/O Error", wx.ICON_ERROR | wx.OK)  # I/O Error message is tailored for this.
            return

        output_lines = []
        for exp in self.experiments.keys():
            experiment = self.experiments[exp]
            if exp not in LabDataSet:
                wx.MessageBox("No lab data for experiment %s." % exp, "Warning", wx.ICON_WARNING | wx.OK)
                continue
            _line = "Experiment: %s" % exp
            _line2 = "=" * len(_line)
            output_lines.append(_line)
            output_lines.append(_line2)
            for treat in experiment.GetTreatments():
                name = treat[0]
                if name not in LabDataSet[exp]:
                    wx.MessageBox("Lab Data file for experiment %s does not contain data for treatment %s." % (exp,
                                                                                                               name),
                                  "Fatal Error", wx.ICON_ERROR | wx.OK)
                    return
                lab_data = LabDataSet[exp][name]
                if len(lab_data) > 0:
                    total_len = len(lab_data[lab_data.keys()[0]]) * len(nodes)
                    matches = 0
                else:
                    wx.MessageBox("Lab data is empty.", "Fatal Error", wx.ICON_ERROR | wx.OK)
                    return

                intervals = res_set[exp][name]
                for node in nodes:
                    ld = lab_data[node]
                    _matches = 0
                    interval = intervals[node]

                    donor = 1
                    for entry in ld:
                        _matches += 1 if (interval[0] <= entry <= interval[1]) else 0
                        donor += 1
                    matches += _matches
                output_lines.append('Percent Accuracy for Treatment Group %s: %.2f' % (name,
                                                                                       100 * (matches / float(
                                                                                           total_len))))

        output = '\n'.join(output_lines)
        try:
            pth = os.path.join(out_loc, 'analysis_results.txt')
            out_f = open(pth, 'w')
            out_f.write(output)
            out_f.close()
        except IOError:
            wx.MessageBox("Could not write results to a file. Displaying them in a window instead.", "I/O Error",
                          wx.ICON_ERROR | wx.OK)

            frm = wx.Dialog(self, title="Confidence Interval Analysis Results")
            txt_out = wx.TextCtrl(frm, style=wx.TE_READONLY | wx.TE_MULTILINE)
            txt_out.SetValue(output)
            txt_out.SetMinSize(txt_out.GetBestSize())
            frm_s = wx.BoxSizer(wx.VERTICAL)
            frm_s.Add(txt_out, 1, wx.EXPAND)
            frm.SetSizer(frm_s)
            frm.ShowModal()

    def ResetOrganizer(self, evt=None):
        self.Organizer = None
        if evt is not None:
            evt.Skip()

    def SetLabDataFiles(self):
        if self.Organizer is not None:
            self.LabData = self.Organizer.GetLabDataExperiments()
            self.ResetOrganizer()  # this must be called or the program may attempt to call wx methods on a NoneType

    def LoadLabData(self):
        ldset = {}
        for i in self.LabData.keys():
            ld_treat = self.LabData[i]
            ldset[i] = {}
            for t in ld_treat.keys():
                ldpath = self.LabData[i][t]
                if ldpath == '':
                    continue
                data = Experiment.LoadCSV(ldpath)
                if data is None:
                    raise IOError("Could not load file '%s'." % ldpath)
                ldset[i][t] = data
        return ldset

    def SaveConfiguration(self, _):
        fd = wx.FileDialog(self, wildcard="Configuration Files (*.txt)|*.txt")
        res = fd.ShowModal()
        if res == wx.ID_CANCEL:
            return
        fnm = fd.GetPath()

        output_lines = [','.join(self.NodeList.GetCheckedStrings())]
        for i in self.experiments.keys():
            experiment = self.experiments[i]
            output_lines.append(i)
            output_lines.append("*Control=%s" % experiment.GetControl())
            ld_set = self.LabData.get(i)
            for j in experiment.GetTreatments():
                output_lines.append("-%s=%s" % (j[0], j[1]))
                if ld_set is not None and j[0] in ld_set:
                    output_lines.append("+%s=%s" % (j[0], ld_set[j[0]]))

        output = '\n'.join(output_lines)

        try:
            f_out = open(fnm, 'w')
            f_out.write(output)
            f_out.close()
            wx.MessageBox("Successfully saved configuration to %s." % fnm, "Success", wx.ICON_INFORMATION | wx.OK)
        except IOError:
            wx.MessageBox("Could not save configuration to file %s." % fnm, "I/O Error", wx.ICON_ERROR | wx.OK)

    def LoadConfiguration(self, _):
        fd = wx.FileDialog(self, wildcard="Configuration Files (*.txt)|*.txt")
        res = fd.ShowModal()
        if res == wx.ID_CANCEL:
            return
        path = fd.GetPath()

        try:
            cfg_file = open(path, 'r')
            cfg_data = cfg_file.read()
            cfg_file.close()
        except IOError:
            wx.MessageBox("Could not open file '%s'." % path, "I/O Error", wx.ICON_ERROR | wx.OK)
            return

        # RESET LAB DATA
        self.LabData = {}

        data = cfg_data.split('\n')
        nodes = data[0].split(',')
        data = data[1:]
        cur_exp = ""
        exp_data = {}
        for i in data:
            if i[0] != '*' and i[0] != '-' and i[0] != '+':
                cur_exp = i
                exp_data[i] = Experiment()
            elif i.startswith("*Control"):
                if cur_exp == "":
                    continue
                path = '='.join(i.split("=")[1:])
                exp_data[cur_exp].SetControl(path)
            # path to dose-response file
            elif i[0] == '-':
                if cur_exp == "":
                    continue
                parts = i.split('=')
                t_name = parts[0][1:]
                path = '='.join(parts[1:])
                exp_data[cur_exp].AddTreatment(t_name, path)
            # path to lab data file
            elif i[0] == '+':
                if cur_exp == "":
                    continue
                parts = i.split('=')
                d_name = parts[0][1:]
                path = '='.join(parts[1:])
                if path == '':
                    continue
                if cur_exp not in self.LabData:
                    self.LabData[cur_exp] = {}
                self.LabData[cur_exp][d_name] = path
            else:
                raise ValueError("Invalid configuration file %s." % path)

        self.ExperimentList.Clear()
        self.ControlFile.SetPath('')
        self.Treatments.Clear()
        self.TreatmentFile.SetPath('')
        self.NodeList.Clear()
        self.OutputDirectory.SetPath('')
        self.HighQuantile.SetValue(0.9)
        self.LowQuantile.SetValue(0.1)

        self.experiments = exp_data
        self.__exp_data = (None, {})
        self.cur_experiment = None

        self.ExperimentList.SetItems(exp_data.keys())

        try:
            self.__load_experiment(None)
            self.__load_experiment(None, True)  # a second call will load the file info

            to_check = []
            s = self.NodeList.GetStrings()
            for node in nodes:
                if node in s:
                    to_check.append(node)
            self.NodeList.SetCheckedStrings(to_check)
        except IOError as ioe:
            wx.MessageBox(ioe.message, "I/O Error", wx.ICON_ERROR | wx.OK)

    def ShowAboutInfo(self, _):
        dlg = wx.Dialog(self, title="About CI Analysis Tool")
        lbl = wx.StaticText(dlg, label="CI Analysis Tool %s, written by %s.\n\n%s" % (VERSION, AUTHOR, DESCRIPTION),
                            style=wx.ALIGN_CENTER)
        ok = wx.Button(dlg, wx.ID_OK, "OK")

        _s = wx.BoxSizer(wx.VERTICAL)
        _s.Add(lbl, 1, wx.EXPAND | wx.ALL, 10)
        _s.Add(ok, 0, wx.ALIGN_CENTER | wx.LEFT | wx.RIGHT | wx.BOTTOM, 10)
        dlg.SetSizer(_s)

        dlg.Layout()
        lbl.Wrap(lbl.GetSize()[0])
        dlg.Fit()
        dlg.Centre()
        dlg.ShowModal()

    def ShowHowTo(self, _):
        dlg = HowToDialog()
        dlg.ShowModal()
        dlg.Destroy()

    def __config_ui(self):
        self.SetMinSize((400, 250))

        # Configure Menus
        menu_bar = wx.MenuBar()
        file_menu = wx.Menu()
        save_item = file_menu.Append(wx.ID_ANY, "&Save Configuration",
                                     "Saves the current configuration of the CI Analysis Tool.")
        load_item = file_menu.Append(wx.ID_ANY, "&Load Configuration",
                                     "Loads a configuration into the CI Analysis Tool.")

        about_menu = wx.Menu()
        about_item = about_menu.Append(wx.ID_ANY, "&About CI Analysis Tool...")
        howto_item = about_menu.Append(wx.ID_ANY, "&How To Use CI Analysis Tool")

        self.Bind(wx.EVT_MENU, self.SaveConfiguration, save_item)
        self.Bind(wx.EVT_MENU, self.LoadConfiguration, load_item)

        self.Bind(wx.EVT_MENU, self.ShowAboutInfo, about_item)
        self.Bind(wx.EVT_MENU, self.ShowHowTo, howto_item)

        menu_bar.Append(file_menu, "&File")
        menu_bar.Append(about_menu, "&About")
        self.SetMenuBar(menu_bar)

        experiment_data = wx.Panel(self)

        # Experiments Box
        experiments_box = wx.Panel(experiment_data)
        experiment_list = wx.ListBox(experiments_box)
        btn_group = wx.Panel(experiments_box)
        rmv_experiment = wx.Button(btn_group, label="Remove")
        edit_experiment = wx.Button(btn_group, label="Rename")
        add_experiment = wx.Button(btn_group, label="Add")

        # Add Event Listeners to Buttons in the Button Group
        self.Bind(wx.EVT_BUTTON, self.__remove_experiment, rmv_experiment)
        self.Bind(wx.EVT_BUTTON, self.__rename_experiment, edit_experiment)
        self.Bind(wx.EVT_BUTTON, self.__new_experiment, add_experiment)

        # Add Event Listener to detect change in the selected experiment
        experiment_list.Bind(wx.EVT_LISTBOX, self.__load_experiment)

        btn_group_boxer = wx.BoxSizer(wx.HORIZONTAL)
        btn_group_boxer.Add(rmv_experiment, 1, wx.EXPAND | wx.ALL, 5)
        btn_group_boxer.Add(edit_experiment, 1, wx.EXPAND | wx.TOP | wx.BOTTOM, 5)
        btn_group_boxer.Add(add_experiment, 1, wx.EXPAND | wx.ALL, 5)
        btn_group.SetSizer(btn_group_boxer)

        experiments_boxer = wx.StaticBoxSizer(wx.VERTICAL, experiments_box, "Experiments")
        experiments_boxer.Add(experiment_list, 1, wx.EXPAND | wx.ALL, 10)
        experiments_boxer.Add(btn_group, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.BOTTOM, 10)
        experiments_box.SetSizer(experiments_boxer)

        # Experiment Settings Box
        experiment_settings_box = wx.Panel(experiment_data)

        control_box = wx.Panel(experiment_settings_box)
        control_dose_response_lbl = wx.StaticText(control_box, label="Dose Response File:")
        control_filepicker = wx.FilePickerCtrl(control_box, wildcard="CSV Files (*.csv)|*.csv")
        control_filepicker.Bind(wx.EVT_FILEPICKER_CHANGED, self.__set_control)
        MakeReadOnly(control_filepicker)

        control_boxer = wx.StaticBoxSizer(wx.HORIZONTAL, control_box, "Control Group")
        control_boxer.Add(control_dose_response_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.TOP | wx.BOTTOM | wx.LEFT, 10)
        control_boxer.Add(control_filepicker, 1, wx.EXPAND | wx.ALL, 10)
        control_box.SetSizer(control_boxer)

        treatment_box = wx.Panel(experiment_settings_box)

        treatments = wx.Panel(treatment_box)
        treat_list = wx.Choice(treatments)
        treat_list.Bind(wx.EVT_CHOICE, self.__treatment_changed)
        add_treat = wx.Button(treatments, label="Add Treatment Group")
        add_treat.Bind(wx.EVT_BUTTON, self.__add_treatment)

        t_dose_response_box = wx.Panel(treatment_box)
        t_dose_response_lbl = wx.StaticText(t_dose_response_box, label="Dose Response File:")
        t_dose_response_fp = wx.FilePickerCtrl(t_dose_response_box, wildcard="CSV Files (.csv)|*.csv")
        t_dose_response_fp.Bind(wx.EVT_FILEPICKER_CHANGED, self.__set_treatment)
        MakeReadOnly(t_dose_response_fp)

        t_dose_response_boxer = wx.BoxSizer(wx.HORIZONTAL)
        t_dose_response_boxer.Add(t_dose_response_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        t_dose_response_boxer.Add(t_dose_response_fp, 1, wx.EXPAND | wx.TOP | wx.BOTTOM | wx.RIGHT, 5)
        t_dose_response_box.SetSizer(t_dose_response_boxer)

        tgroup_boxer = wx.BoxSizer(wx.HORIZONTAL)
        tgroup_boxer.Add(treat_list, 1, wx.EXPAND | wx.ALL, 7)
        tgroup_boxer.Add(add_treat, 0, wx.TOP | wx.BOTTOM | wx.RIGHT, 7)
        treatments.SetSizer(tgroup_boxer)

        treatment_boxer = wx.StaticBoxSizer(wx.VERTICAL, treatment_box, "Treatment Groups")
        treatment_boxer.Add(treatments, 0, wx.EXPAND | wx.ALL, 5)
        treatment_boxer.Add(t_dose_response_box, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.BOTTOM, 5)
        treatment_box.SetSizer(treatment_boxer)

        experiment_settings_boxer = wx.StaticBoxSizer(wx.VERTICAL, experiment_settings_box, "Experiment Settings")
        experiment_settings_boxer.Add(control_box, 0, wx.EXPAND | wx.ALL, 10)
        experiment_settings_boxer.Add(treatment_box, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.BOTTOM, 10)
        experiment_settings_box.SetSizer(experiment_settings_boxer)

        experiment_data_boxer = wx.BoxSizer(wx.VERTICAL)
        experiment_data_boxer.Add(experiments_box, 0, wx.EXPAND | wx.ALL, 10)
        experiment_data_boxer.Add(experiment_settings_box, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.BOTTOM, 10)
        experiment_data.SetSizer(experiment_data_boxer)

        # Node List and Lab Data
        data_2 = wx.Panel(self)

        nodes = wx.Panel(data_2)
        node_lbl = wx.StaticText(nodes, label="Select the nodes for which to calculate confidence intervals.")
        node_list = wx.CheckListBox(nodes, style=wx.LB_SORT)

        nodes_boxer = wx.StaticBoxSizer(wx.VERTICAL, nodes, "Nodes of Interest")
        nodes_boxer.Add(node_lbl, 0, wx.EXPAND | wx.ALL, 10)
        nodes_boxer.Add(node_list, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.BOTTOM, 10)
        nodes.SetSizer(nodes_boxer)

        # temporary...?
        quantiles = wx.Panel(data_2)
        quantiles_lbl = wx.StaticText(quantiles, label="Quantiles for Confidence Interval:")
        low_quantile = floatspin.FloatSpin(quantiles, min_val=0, max_val=1, increment=0.01, value=0.1,
                                           agwStyle=floatspin.FS_CENTRE)
        low_quantile.SetFormat('%f')
        low_quantile.SetDigits(3)
        dash_lbl = wx.StaticText(quantiles, label="-")
        high_quantile = floatspin.FloatSpin(quantiles, min_val=0, max_val=1, increment=0.01, value=0.9,
                                            agwStyle=floatspin.FS_CENTRE)
        high_quantile.SetFormat('%f')
        high_quantile.SetDigits(3)

        quantiles_boxer = wx.StaticBoxSizer(wx.HORIZONTAL, quantiles, "Confidence Interval Quantiles")
        quantiles_boxer.AddStretchSpacer(1)
        quantiles_boxer.Add(quantiles_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 7)
        quantiles_boxer.Add(low_quantile, 0, wx.EXPAND | wx.TOP | wx.BOTTOM | wx.RIGHT, 7)
        quantiles_boxer.Add(dash_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.TOP | wx.BOTTOM | wx.RIGHT, 7)
        quantiles_boxer.Add(high_quantile, 0, wx.EXPAND | wx.TOP | wx.BOTTOM | wx.RIGHT, 7)
        quantiles_boxer.AddStretchSpacer(1)
        quantiles.SetSizer(quantiles_boxer)

        lab_data = wx.Panel(data_2)
        edit_btn = wx.Button(lab_data, label="Configure Lab Data...")

        def show_lab_data_editor(_):
            k = self.experiments.keys()
            if len(k) == 0:
                wx.MessageBox("No experiments created. Please prepare one or more experiments before loading lab data.",
                              "No Experiments", wx.ICON_INFORMATION | wx.OK)
                return
            if self.Organizer is None:
                self.Organizer = LabDataOrganizer(self.experiments, self)
                self.Organizer.SetLabDataExperiments(self.LabData)
                self.Organizer.OnClose(self.SetLabDataFiles)
                self.Organizer.Show()
            else:
                self.Organizer.Raise()

        edit_btn.Bind(wx.EVT_BUTTON, show_lab_data_editor)

        lab_data_sizer = wx.StaticBoxSizer(wx.VERTICAL, lab_data, "Lab Data")
        lab_data_sizer.Add(edit_btn, 0, wx.ALL | wx.ALIGN_CENTER, 7)
        lab_data.SetSizer(lab_data_sizer)

        output_pan = wx.Panel(data_2)
        output_dir_lbl = wx.StaticText(output_pan, label="Output Directory:")
        output_dir = wx.DirPickerCtrl(output_pan)
        MakeReadOnly(output_dir)
        output_sizer = wx.StaticBoxSizer(wx.HORIZONTAL, output_pan, "Output Location")
        output_sizer.Add(output_dir_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 7)
        output_sizer.Add(output_dir, 1, wx.EXPAND | wx.TOP | wx.BOTTOM | wx.RIGHT, 7)
        output_pan.SetSizer(output_sizer)

        run_analysis = wx.Button(data_2, label="Run Analysis")
        run_analysis.Bind(wx.EVT_BUTTON, self.RunAnalysis)

        data_2_boxer = wx.BoxSizer(wx.VERTICAL)
        data_2_boxer.Add(nodes, 1, wx.EXPAND | wx.ALL, 10)
        data_2_boxer.Add(quantiles, 0, wx.EXPAND | wx.RIGHT | wx.LEFT | wx.BOTTOM, 10)
        data_2_boxer.Add(lab_data, 0, wx.EXPAND | wx.RIGHT | wx.LEFT | wx.BOTTOM, 10)
        data_2_boxer.Add(output_pan, 0, wx.EXPAND | wx.RIGHT | wx.LEFT, 10)
        data_2_boxer.Add(run_analysis, 0, wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM | wx.ALL, 10)
        data_2.SetSizer(data_2_boxer)

        self_boxer = wx.BoxSizer(wx.HORIZONTAL)
        self_boxer.Add(experiment_data, 1, wx.EXPAND)
        self_boxer.Add(data_2, 1, wx.EXPAND)
        self.SetSizer(self_boxer)

        # store some components in the class for universal accessibility
        self.ExperimentBox = experiments_box
        self.ExperimentList = experiment_list
        self.Treatments = treat_list
        self.ControlFile = control_filepicker
        self.TreatmentFile = t_dose_response_fp

        self.NodeList = node_list
        self.NodeBox = nodes
        self.OutputDirectory = output_dir

        self.LowQuantile = low_quantile
        self.HighQuantile = high_quantile

        # Set to a nice size :), refuse to allow the window to be set to a
        # smaller size than the minimum ideal size determined by Fit().
        self.Fit()
        self.InitialSize = self.GetSize()
        self.SetMinSize(self.InitialSize)


if __name__ == '__main__':
    app = wx.App()

    ci = CIAnalysisTool()
    ci.Show()

    app.MainLoop()
